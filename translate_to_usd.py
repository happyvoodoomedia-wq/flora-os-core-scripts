# translate_to_usd.py
#!/usr/bin/env python3
"""
Flora/OS USD Translation Pipeline (v1.4 - Final Handoff Fix)
This script correctly translates the complex geometry (points and curve 
vertex counts) generated by the L-System engine into a valid .usda file 
using the BasisCurves schema. This version ensures the data handoff from
the simulation state to the final text format is correct.
"""
import argparse
import pickle
import json
from datetime import datetime

def create_usda_content(simulation_state, biological_prompt):
    """Constructs the string content for a .usda file with BasisCurves."""
    prompt_string_escaped = json.dumps(biological_prompt, indent=2).replace('"""', '\\"\\"\\"')
    uti = biological_prompt.get('metadata', {}).get('uti', 'UNKNOWN_UTI')
    prim_path_name = uti.replace('.', '_').replace('-', '_')

    # --- Correctly extract complex geometry from the simulation state ---
    geometry = simulation_state.get('organism_geometry', {})
    points = geometry.get('points', [[0,0,0]])
    curve_counts = geometry.get('curveVertexCounts', [])

    # Format the list of points for USD
    # e.g., "[(0,0,0), (0,1,0), ...]"
    points_str = ", ".join([f"({p[0]:.4f}, {p[1]:.4f}, {p[2]:.4f})" for p in points])
    
    # Format the list of vertex counts for USD
    # e.g., "[2, 2, 2, ...]"
    curve_vertex_counts_str = ", ".join(map(str, curve_counts))

    usda_template = f'''#usda 1.0
(
    upAxis = "Y"
)

def Xform "FloraOrganism_{prim_path_name}"
{{
    custom string flora:biologicalPrompt = """{prompt_string_escaped}"""

    def BasisCurves "organism_geometry"
    {{
        int[] curveVertexCounts = [{curve_vertex_counts_str}]
        point3f[] points = [{points_str}]
        uniform token type = "linear"
        
        uniform float[] widths = [0.01]
        color3f[] primvars:displayColor = [(0.65, 0.8, 0.95)]
    }}
}}
'''
    return usda_template

def translate_to_usd(state_file_path, prompt_file_path, output_usd_path):
    """Loads state and prompt, then generates a valid .usda file."""
    print("--- Starting translation to USD (v1.4 Final)... ---")
    try:
        with open(state_file_path, 'rb') as f:
            state = pickle.load(f)
        with open(prompt_file_path, 'r') as f:
            prompt = json.load(f)
            
        usda_content = create_usda_content(state, prompt)
        
        with open(output_usd_path, 'w') as f:
            f.write(usda_content)
        print(f"--- Translation complete. Valid USD file saved to: {output_usd_path} ---")
        
    except Exception as e:
        print(f"!!! An error occurred during translation: {e}")
        with open(output_usd_path, 'w') as f:
            f.write(f"# FAILED to generate USD. Error: {e}")

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Translate a Flora/OS simulation state to a USD file.")
    parser.add_argument('--state_file', type=str, required=True)
    parser.add_argument('--prompt_file', type=str, required=True)
    parser.add_argument('--output_usd', type=str, required=True)
    args = parser.parse_args()
    translate_to_usd(args.state_file, args.prompt_file, args.output_usd)

